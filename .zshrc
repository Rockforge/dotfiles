# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Use our antigen
source $HOME/antigen.zsh

### Load the oh-my-zsh's library.
antigen use oh-my-zsh

### Bundles/Packages
antigen bundle git
#antigen bundle docker
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-autosuggestions

### Themes
#antigen theme romkatv/powerlevel10k
antigen theme robbyrussell

# Apply
antigen apply

### Exports
export TERM="xterm-256color"

# Editors
export EDITOR="nvim"
export VISUAL="nvim"

# Set where .nvm is found
export NVM_DIR="$HOME/.nvm"
# Setup Pipenv to where .virtualenvs should be placed
#export WORKON_HOME="$HOME/.virtualenvs"

# Setup our python bin. Absolutely no reason to set this anymore... I think
#export PYTHON_BIN="$HOME/Library/Python/3.8/bin"
#export PATH="$PYTHON_BIN:$PATH"

##### Macbook Mac M1 Related exports
### Use that new homebrew path for Mac M1
export PATH="/opt/homebrew/bin:$PATH"
export PATH="/Applications/CMake.app/Contents/bin:$PATH"

### NOTE: Stuff to make pyodbc work in Mac M1
#export CPPFLAGS="-I/opt/homebrew/Cellar/unixodbc/2.3.9_1/include"
#export LDFLAGS="-L/opt/homebrew/Cellar/unixodbc/2.3.9_1/lib -liodbc -liodbcinst"

# Automatically generated by nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Check if these files exist and source them
[[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
[[ -f ~/.aliases ]] && source ~/.aliases
[[ -f ~/.aliases_work ]] && source ~/.aliases_work


### Autogenerated thingies

# Check if pyenv is there and initialize it
if command -v pyenv &> /dev/null; then
    # Make sure that we have pyenv initialized
    eval "$(pyenv init -)"
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/chan-isentia/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/chan-isentia/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/chan-isentia/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/chan-isentia/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

[[ $commands[kubectl] ]] && source <(kubectl completion zsh)

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/homebrew/bin/terraform terraform

eval "$(direnv hook zsh)"
eval "$(rbenv init - zsh)"
#export PATH="/opt/homebrew/opt/protobuf@21/bin:$PATH"

unalias gsts

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


# Herd injected PHP 8.3 configuration.
export HERD_PHP_83_INI_SCAN_DIR="/Users/chan-isentia/Library/Application Support/Herd/config/php/83/"


# Herd injected PHP binary.
export PATH="/Users/chan-isentia/Library/Application Support/Herd/bin/":$PATH
